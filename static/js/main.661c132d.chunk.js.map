{"version":3,"sources":["icons/twitter2.png","components/Home.js","components/Footer.js","components/Header.js","initial.js","components/NamesForm.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","to","Footer","href","src","twitter","link","alt","width","header","initial","name","names","NamesForm","useState","setNames","setName","pairs","setPairs","Players","ListTeams","pair","onSubmit","e","preventDefault","align","htmlFor","onChange","target","value","type","onClick","players","concat","map","key","newPairs","length","sort","Math","random","pop","push","console","log","disabled","App","Fragment","Header","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.661c132d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitter2.c8f7c054.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = () => (\n  <div className=\"bodyHome\">\n    <div className=\"homepageTitle\"> \n    <h1 >Ping Pong Tournament</h1>\n    <h3 >The table tennis tournament generator</h3>\n  </div>\n      <div className=\"beginButton\">\n      <Link to=\"/namesform\">\n      <button className=\"buttonMain\">Begin</button>\n      </Link>\n      </div>\n  </div>\n)\n\nexport default Home; \n","import React from 'react';\nimport twitter from \"../icons/twitter2.png\"; \n\n\nconst Footer = () => (\n    <>\n        <footer>\n            <p className=\"date\"> &copy; 2020</p>\n            <p className=\"rights\"><i>Designed & Built by Nate Lloyd</i></p>\n            <div className=\"icons\">\n    \n            <a href='https://twitter.com/nateknown/' className=\"icon\" >\n                <img src={twitter} link=\"\" alt=\"twitterwidget\" width=\"100%\"  className=\"icon\" />\n            </a>\n            </div>\n        </footer>\n    </>\n);\n\nexport default Footer;\n","import React from 'react';\n\nexport const header = () => (\n\n  <div className=\"headerBackground\">\n  </div>\n)\n\nexport default header; ","const initial = {\n    name: \"\",\n    names: [],\n};\n    \nexport default initial;","import React, { useState } from \"react\";\nimport { Link } from 'react-router-dom';\nimport initial from \"../initial\";\n\nfunction NamesForm() {\n\n  // here I'm setting the state for the names array and the pairs array\n  const [names, setNames] = useState(initial.names);\n  const [name, setName] = useState(initial.name);\n  const [pairs, setPairs] = useState([]);\n\n  // here the names are being added to the array once the add button is clicked\n  const handleChange = () => {\n    setNames(players => players.concat(name))\n  }\n\n  // the value in the input field is being used to add to the names array\n  const updateList = ({ target }) => {\n    // update name onKeyPress of input box\n    setName(target.value)\n  }\n\n  // sets the input field back to empty\n  const submitHandler = e => {\n    // prevent form submission on Enter key\n    e.preventDefault();\n    setName(\"\");\n  }\n\n  // clears the state if the user wants to reset \n  const handleReset = () => {\n    setNames([]);\n    setName(\"\");\n    setPairs([]);\n  }\n\n  const createTeam = () => {\n    // creates a new array for new pairs \n    const newPairs = [];\n\n    // needs atleast 2 players to form a pair\n    while (names.length >= 2) {\n\n      // randomises the pairs \n      names.sort(() => 0.5 - Math.random());\n\n      // takes each name and puts them into a pair\n      const pair = [names.pop(), names.pop()];\n\n      // saves the current pair\n      newPairs.push(pair);\n\n      // logging current pair to check it's worked\n      console.log(pair);\n    }\n    //takes the new pairs and asigns them to the state\n    setPairs(newPairs);\n  }\n\n  // React components should start with a capital, and html elements start with lowercase  \n  // listing new name once added \n  const Players = ({ name }) => <li>{name}</li>\n\n  // listing new pairs once teams are created \n  const ListTeams = ({ pair }) => <li>{pair[0]} v {pair[1]}</li>\n\n  return (\n    <>\n      <div className=\"formBackground\">\n        <h3 className=\"setupTitle\">Enter Player Names</h3>\n        <form className=\"App\" onSubmit={submitHandler}>\n          <div className=\"container\" align=\"center\">\n            <div className=\"row\">\n              <div className=\"col\">\n                {/* // needs to be htmlFor otherwise throws an error in the console  */}\n                <label className=\"label\" htmlFor=\"name\">Player Name</label>\n                <input\n                  onChange={updateList}\n                  type=\"text\" className=\"form-control\"\n                  value={name} />\n                <button className=\"addButton\" onClick={handleChange}>Add</button>\n                <button className=\"resetButton\"\n                  onClick={handleReset}\n                >Reset</button>\n                <ul className=\"namesList\">\n                  {names.map((name) => (\n                    <Players\n                      name={name}\n                      // prevent duplicate keys by appending index:\n                      key={name}\n                    />\n                  ))}\n                </ul>\n                <div className=\"formBackground\">\n                  <div className=\"shuffleWrap\">\n                    <button className=\"createButton\"\n                      onClick={createTeam}\n                      // disabling button if an uneven number of pairs, or 0 is entered by the user \n                      disabled={!names.length || names.length % 2}>\n                      Create Fixtures</button>\n                    {/* displays error message if an uneven number of players are added */}\n                    {names.length % 2 ? <p className=\"errorMessage\">Please enter an even number of players</p> : null}\n                    <ul className=\"fixtureList\">\n                      {pairs.map((pair) => (\n                        <ListTeams\n                          pair={pair}\n                          key={pair}\n                        />\n                      ))}\n                    </ul>\n                    <Link to=\"/\">\n                      <button className=\"homeButton\">Back To Start</button>\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default NamesForm;\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from \"./Home\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport NamesForm from \"./NamesForm.js\"; \n\nfunction App() {\n \n  return (\n    <React.Fragment>\n      <Router>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\"> \n            <Home />\n          </Route>\n          <Route exact path=\"/namesform\">\n             <NamesForm />\n          </Route>\n        </Switch>\n        <Footer />\n      </Router>\n    </React.Fragment>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  \ndocument.getElementById('root')); \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}